openapi: 3.0.3
info:
  title: Users API
  description: API for managing users in the News Portal
  version: 1.0.0
  contact:
    name: News Portal Team
    email: support@newsportal.com

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /api/v1/users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getAllUsers
      tags:
        - Users
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      summary: Create a new user
      description: Create a new user account
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          headers:
            Location:
              description: URL of the created user
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User with this nickname or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      summary: Update user
      description: Update an existing user
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User with this nickname or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete user
      description: Delete a user by their ID
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/nickname/{nickname}:
    get:
      summary: Get user by nickname
      description: Retrieve a user by their nickname
      operationId: getUserByNickname
      tags:
        - Users
      parameters:
        - name: nickname
          in: path
          required: true
          description: Nickname of the user to retrieve
          schema:
            type: string
            minLength: 3
            maxLength: 255
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/email/{email}:
    get:
      summary: Get user by email
      description: Retrieve a user by their email address
      operationId: getUserByEmail
      tags:
        - Users
      parameters:
        - name: email
          in: path
          required: true
          description: Email address of the user to retrieve
          schema:
            type: string
            format: email
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRequest:
      type: object
      required:
        - nickname
        - email
        - role
      properties:
        nickname:
          type: string
          minLength: 3
          maxLength: 255
          description: User's unique nickname
          example: "john_doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        role:
          type: string
          description: User's role in the system
          example: "USER"
          enum:
            - USER
            - ADMIN
            - MODERATOR

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user
          example: 1
        nickname:
          type: string
          description: User's unique nickname
          example: "john_doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        role:
          type: string
          description: User's role in the system
          example: "USER"

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred
          example: "2023-12-01T10:30:00Z"
        status:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error type
          example: "Bad Request"
        message:
          type: string
          description: Error message
          example: "Nickname is required"
        path:
          type: string
          description: Request path that caused the error
          example: "/api/v1/users"

tags:
  - name: Users
    description: Operations related to user management